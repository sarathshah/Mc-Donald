# -*- coding: utf-8 -*-
"""Mc'Donald.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJV8QTJJuBi2UNbKyYFoAKh7lxG9mpeJ
"""

import numpy as np # linear algebra
import pandas as pd # data processing

df = pd.read_csv("/content/India_Menu.csv") # read csv
df.head(10)

def infoo(df):
    df.info() # getting data frame information
    print("-" * 50)
    print(f"number of rows: {df.shape[0]}") # dataframe rows number
    print("-" * 50)
    print(f"number of columns: {df.shape[1]}") # dataframe columns number
    print("-" * 50)
for c in df.columns:
      if df[c].dtype == 'float' or df[c].dtype == 'int': # if numerical values
            print("the values of {} are within range {} to {}".format(c,df[c].min(),df[c].max())) # get range
      else: # string or categorial values
            print("Number of Unique value of {} is: {}".format(c, len(df[c].unique()))) # get number of unqiue value
            print("Unique value of {} is: {}".format(c, df[c].unique())) # get unique values
            print("-" * 50)
for c in df.columns:
     print("Nan number in {} is: {}".format(c, df[c].isna().sum())) # collect nan values
     print("-" * 50)

infoo(df)

df.dropna(inplace = True) # drop nan row
df.info() # see info

"""**Per Serve Size is object because it ends with g or ml so we need to divide it to 2 columns first columns has the numerical values and the other column is g or ml**"""

df[['Per Serve Size no', 'Per Serve Size (g/ml)']] = df['Per Serve Size'].str.split(' ', 1, expand=True) # spliting the column into 2 columns
df.drop("Per Serve Size", axis=1, inplace=True) # delete the old column
df['Per Serve Size no'] = df['Per Serve Size no'].astype("float")
df.head(10) # show top 10 rows

"""**First let's find which category has the highest (Energy, protein ,etc)**"""

co = df.columns # list of columns
co

import matplotlib.pyplot as plt
x = ['Energy (kCal)', 'Protein (g)',
       'Total fat (g)', 'Sat Fat (g)', 'Trans fat (g)', 'Cholesterols (mg)',
       'Total carbohydrate (g)', 'Total Sugars (g)', 'Added Sugars (g)',
       'Sodium (mg)'] # which we will compare
for i in x:
    s = df.groupby("Menu Category").agg("sum") #group with sum
    y = s[i]
    mylabels = s.index
    plt.pie(y, labels = mylabels)
    plt.title(i)
    plt.show()

"""**Regular Menu is the highest in the most label but MyCafe Menu is the highest in [Added sugar, Total sugars, Total carbohydrate]**

**In this line of code we will split per serve size into 2 groups to be easy to compare**
"""

g_ml = df['Per Serve Size (g/ml)'].unique()
for i in g_ml:
    s = df[df['Per Serve Size (g/ml)'] == i]
    s = df.groupby("Menu Category")['Per Serve Size no'].agg("sum") #group with sum
    y = list(s)
    mylabels = s.index
    plt.pie(y, labels = mylabels)
    plt.title(i)
    plt.show()

"""**MyCafe Menu has the highest Per Serve Size**

**Now we want to see who has the highest rate for each items**
"""

high_mycafe = ['Total carbohydrate (g)', 'Total Sugars (g)', 'Added Sugars (g)'] # highest my cafe
high_regular = ['Energy (kCal)', 'Protein (g)',
       'Total fat (g)', 'Sat Fat (g)', 'Trans fat (g)', 'Cholesterols (mg)',
       'Sodium (mg)'] # highest in regular

for i in high_mycafe:
    s = df[df["Menu Category"] == "McCafe Menu"]
    d = s.groupby("Menu Items").agg("sum") #group with sum
    y = d[i]
    mylabels = d.index
    fig = plt.figure(figsize = (20, 20))
    # creating the bar plot
    plt.bar(mylabels, y, color ='c')

    plt.xlabel("Menu Category")
    plt.xticks(rotation='vertical')
    plt.ylabel(i)
    plt.title("{} in Menu Category".format(i))
    plt.show()

"""**Chocolate oreo frappe has the highest sugar**

**Medium blackforest has the highest Total caybo.**
"""

for i in high_regular:
    s = df[df["Menu Category"] == "Regular Menu"]
    d = s.groupby("Menu Items").agg("sum") #group with sum
    y = d[i]
    mylabels = d.index
    fig = plt.figure(figsize = (20, 20))
    # creating the bar plot
    plt.bar(mylabels, y, color ='c')

    plt.xlabel("Menu Category")
    plt.xticks(rotation='vertical')
    plt.ylabel(i)
    plt.title("{} in Menu Category".format(i))
    plt.show()



